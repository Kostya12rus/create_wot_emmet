# uncompyle6 version 3.9.0
# Python bytecode version base 2.7 (62211)
# Decompiled from: Python 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
# Embedded file name: scripts/common/site-packages/future-0.18.2/future/backports/total_ordering.py
import sys
if sys.version_info >= (2, 7, 2):
    from functools import total_ordering
else:

    def total_ordering(cls):
        convert = {'__lt__': [
                    (
                     '__gt__', (lambda self, other: not (self < other or self == other))),
                    (
                     '__le__', (lambda self, other: self < other or self == other)),
                    (
                     '__ge__', (lambda self, other: not self < other))], 
           '__le__': [
                    (
                     '__ge__', (lambda self, other: not self <= other or self == other)),
                    (
                     '__lt__', (lambda self, other: self <= other and not self == other)),
                    (
                     '__gt__', (lambda self, other: not self <= other))], 
           '__gt__': [
                    (
                     '__lt__', (lambda self, other: not (self > other or self == other))),
                    (
                     '__ge__', (lambda self, other: self > other or self == other)),
                    (
                     '__le__', (lambda self, other: not self > other))], 
           '__ge__': [
                    (
                     '__le__', (lambda self, other: not self >= other or self == other)),
                    (
                     '__gt__', (lambda self, other: self >= other and not self == other)),
                    (
                     '__lt__', (lambda self, other: not self >= other))]}
        roots = set(dir(cls)) & set(convert)
        if not roots:
            raise ValueError('must define at least one ordering operation: < > <= >=')
        root = max(roots)
        for opname, opfunc in convert[root]:
            if opname not in roots:
                opfunc.__name__ = opname
                opfunc.__doc__ = getattr(int, opname).__doc__
                setattr(cls, opname, opfunc)

        return cls